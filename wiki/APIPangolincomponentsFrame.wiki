#summary Class API for Frame from module Components
#labels Class-jplex.components.Frame,Release-Pangolin,Module-Components,API-Class
#sidebar APIPangolincomponentsIndex

= Class *jplex.components.Frame*  _extends [APIPangolincommonComponent jplex.common.Component]_  =

== Description ==
Frame component.
The frame/window is a common component in every UI Library and widely used over the web.
Basically, it mimics the behavior of similar UI component in Java Swing, C++ QT...
and easily catches user's attention on a specific content.
<p>
This class provides the core features for displaying and manipulating windows, such as
<ul>
<li>Title bar and footer bar, with an optional "close" button</li>
<li>Load the content with Ajax Request</li>
<li>Drag and drop the window</li>
<li>Control of the size and position of the window (center, min/max width/height...)</li>
<li>Events on key moments of the life-cycle</li>
<li>Display (or not) a semi-transparent overlay behind the window</li>
</ul>
Have a look to configuration parameters to see how you can set up your window and mix parameters together.
</p>
<p>
jPlex also provides some preconfigured subclasses of the Frame component for
<ul>
<li>Modal window : Display an overlay behing the window, see jplex.components.frame.Modal</li>
<li>Dialog window : Add two buttons automatically in the footer (typically "OK" and "Cancel"),
see jplex.components.frame.Dialog</li>
</ul>
</p>

== Config Table ==
|| *Name* || *Default Value* || *Description* ||
|| _ajax_ || `null` ||  URL of the file to get the content from. If `null`, no content is loaded<br />and you'll have to use the `setBody` method to add some content to your window. ||
|| _ajaxParameters_ || `{}` ||  HashSet of parameters for the ajax call. E.g. `{ foo: "bar" }` ||
|| _center_ || `true` ||  Center the window on the screen.<br />Note: it won't stay centered on resize/scroll/content change<br />unless you set `constrainToCenter` to `true`. ||
|| _close_ || `Frame.CLOSE_BUTTON` ||  Way to close the window:<br /><ul><li>`jplex.components.Frame.CLOSE_BUTTON`:<br />will display a close button on the top-right corner</li><br /><li>`jplex.components.Frame.CLOSE_CLICK_OUT`:<br />the window will be closed when the user clicks outside the window<br />(be sure your users know it), it's designed especially for modal windows.</li><br /><li>`jplex.components.Frame.CLOSE_CUSTOM`:<br />it's your responsability to call the `show()` and `hide()` methods.</li><br /></ul> ||
|| _constrainToCenter_ || `false` ||  If `true`, the window will stay centered no matter<br />if the viewport is resized, scrolled or if the content changes ||
|| _constrainToViewport_ || `true` ||  Make sure the window stay inside the viewport bounds (even when dragged) ||
|| _draggable_ || `false` ||  Indicates whether the window could be dragged in the viewport.<br />Note: if the window has a header (title bar) only this header can be grabbed<br />for drag'n'drop, if it has no header, the entire window can be grabbed.<br />(Use of Script.aculo.us Draggable class) ||
|| _footer_ || `false` ||  Show a footer (like a status-bar) at the bottom of the window<br />(for Dialog windows, the footer will contain the buttons) ||
|| _header_ || `true` ||  Show the title bar or not (so you can use `setTitle` and have a close button on top-right corner) ||
|| _height_ || `null` ||  The initial height of the window (in pixels) ||
|| _maxHeight_ || `null` ||  Maximum height of the window (constrained) ||
|| _maxWidth_ || `null` ||  Maximum width of the window (constrained) ||
|| _minHeight_ || `null` ||  Minimum Height of the window (constrained) ||
|| _minWidth_ || `null` ||  Minimum width of the window (constrained) ||
|| _modal_ || `false` ||  Flag indicating you want to add a modal behavior to the window<br />(overlay behind) ||
|| _overflow_ || `"auto"` ||  CSS "overflow" Property for the body of the window<br />(i.e. the window without header and footer).<br />Use in combination with maxWidth/maxHeight.<br />(`auto` adds scrollbar(s) if needed, `hidden` hides extra content,<br />`scroll` adds scrollbars, `scroll-x` and `scroll-y` add the corresponding scroll bar) ||
|| _overlayColor_ || `#000000 (black)` ||  Background color of the overlay ||
|| _overlayFade_ || `false` ||  If set to `true` the overlay will (dis)appear with a fade in/out effect ||
|| _overlayOpacity_ || `0.6` ||  Opacity of the overlay (from 0 to 1, 1 is opaque and 0 fully transparent) ||
|| _title_ || `""` ||  Title of the window (pertinent only if there _is_ a header). ||
|| _width_ || `null` ||  The initial width of the window (in pixels) ||
|| _zBase_ || `9998` ||  The z-index base for this window. You can adjust it to match your design.<br />(the overlay (if any) will have this z-index and the window the same + 1) ||

== Event Table ==
|| *Name* || *Description* || *Parameters* ||
|| _afterRenderEvent_ ||  After the rendering step (the window is built) ||  ||
|| _beforeRenderEvent_ ||  Before the window is rendered (before any element is added) ||  ||
|| _onAjaxRequestCompleteEvent_ ||  When the Ajax Request to retrieve the content of the window is completed ||   - `result <Object>`  the Ajax Request's result (get the text result with `result.responseText` for instance) <br/>  ||
|| _onHideEvent_ ||  When the window disappears ||  ||
|| _onShowEvent_ ||  When the window appears ||  ||
== Properties ==         
|| *Name* || *Type* || *Description* ||
|| _CLOSE_BUTTON_ || String || `- static `Configuration constant: use a button to close the frame||
|| _CLOSE_CLICK_OUT_ || String || `- static `Configuration constant: the frame is closed when the user clicks outside||
|| _CLOSE_CUSTOM_ || String || `- static `Configuration constant: you decide when the frame is shown/hidden||
|| _list_ || Array || `- static `Array of references to all window components used (useful to set z-indices)||



== Methods ==                                
|| *Signature* || *Return Type* || *Description* ||
|| `hide()` || `void` || Hide the frame<br /> ||
|| `makeCentered()` || `void` || Place the frame at the center of the viewport<br /> ||
|| `reload()` || `void` || Load or reload the content of the body from the result of the ajax request<br/>(the URL of the content is given by the `ajax` configuration parameter)<br /> ||
|| `render()` || `void` || Renders the component. Add elements depending on the configuration, apply CSS classes...<br /> ||
|| `setBody(body)` || `Element` || If the body already exists, update its content, else<br/>create the body element and add the content.<br />  - `body <String>` Content of the body<br/>||
|| `setFooter(footer)` || `Element` || If the footer already exists, update the footer with the given content,<br/>else create it and update the content.<br />  - `footer <String>`<br/>||
|| `setHeader(header)` || `Element` || If the header already exists, replace the title with the given string.<br/>If not, create the title bar and set the given string as title.<br />  - `header <String>` the title of the window<br/>||
|| `setLoading(start)` || `void` || Show the "activity indicator" while the content of the frame is dynamically loaded<br/>or hide it when it's done.<br />  - `start <bool>` `true` to start loading mode, `false` to stop it<br/>||
|| `setTitle(title)` || `Element` || Alias for setHeader<br />  - `title <String>`<br/>||
|| `show()` || `void` || Show the frame<br /> ||

=== Inherited Methods ===

 * [APIPangolincommonComponent jplex.common.Component]:  `$C`,  `cfg`,  `fireEvent`,  `getEvent`,  `lang`,  `locale`,  `setCfg`,  `setEvent`,  `unregister`, 
