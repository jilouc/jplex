#summary Class API for Tabs from module Components
#labels Class-jplex.components.Tabs,Release-Pangolin,Module-Components,API-Class
#sidebar APIPangolincomponentsIndex

= Class *jplex.components.Tabs*  _extends [APIPangolincommonComponent jplex.common.Component]_  =

== Description ==
Tabs component, creates a neat tab bar in a <em>ul</em> container. This bar controls the display of
<em>div</em>s. There is two methods, a classical one with many <em>div</em>s that are managed by show/hide methods. 
Or another one by getting the content via Ajax and display it on a single <em>div</em>. 

The content has the following form:
{{{
[
  {title: 'First test', content:'test1'}, // test1 is a div id
  {title: 'Second test', content:'test2'} // test2 is a div id
]
}}}

== Config Table ==
|| *Name* || *Default Value* || *Description* ||
|| _activeTab_ || `0` ||  Default active tab index (first = 0) ||
|| _ajaxDiv_ || `false` ||  <em>Require 'ajax' method. </em><strong>Mandatory.</strong>  Container to display the content ||
|| _ajaxMethod_ || `"get"` ||  <em>Require 'ajax' method.</em> HTTP method to use for Ajax Requests ||
|| _ajaxReload_ || `false` ||  <em>Require 'ajax' method.</em> If false, the content of each tabs is cached and will not be<br />requested again. Else for each tab switch, you will do a request ||
|| _data_ || `null` ||  <strong>Mandatory.</strong> Describes the tab structure. It is a array of objects that have only two <br />fields, `title`: which is the title to put in the tab bar and `content` which is a div <br />id if the method is the div one, or a url if it's the other. ||
|| _method_ || `"div"` ||  'div' indicates the classical method, 'ajax' indicates the other (see bellow) ||
|| _style_ || `"jplex-tabs"` ||  Default style to apply to the `ul` markup ||

== Event Table ==
|| *Name* || *Description* || *Parameters* ||
|| _onSwitchEvent_ ||   ||   - `oldContent <Array>`  The content field from <em>data</em> that corresponds to the tab the user just quitted <br/> - `newContent <Array>`  The content field from <em>data</em> that corresponds to the tab the user just selected <br/>  ||
== Properties ==         
|| *Name* || *Type* || *Description* ||
|| _{Array} cache_ || object || `- private `The cache stores each tabs's innerHTML when ajaxReload is false||



== Methods ==                                
|| *Signature* || *Return Type* || *Description* ||
|| `getActiveTab()` || `int` || Returns the current active tab<br /> ||
|| `handleAjaxMethod(newUrl, oldUrl)` || `void` || Sub handler for Ajax Method. Depending of the config `ajaxReload` an AJAX request should be launched<br />  - `newUrl <String>` `URL` of the new content<br/> - `oldUrl <String>` `URL` of the old content<br/>||
|| `handleDivMethod(newTab, oldTab)` || `void` || Sub handler for Div Method<br />  - `newTab <String>` `id` of the new tab<br/> - `oldTab <String>` `id` of the old tab<br/>||
|| `handler(newTab, li)` || `void` || Switch handler<br />  - `newTab <object>` New definition object<br/> - `li <object>` `li` markup where it has been clicked<br/>||
|| `initAjaxMethod(definition, activeTab)` || `void` || Initialize the Ajax Method: redirect to `handleAjaxMethod`<br />  - `definition <Array>` Same form as `data` from config<br/> - `activeTab <int>` The tab to show<br/>||
|| `initDivMethod(definition, activeTab)` || `void` || Initialize the Div Method : hide the right divs, and show the `activeTab`th one<br />  - `definition <Array>` Same form as `data` from config<br/> - `activeTab <int>` The tab to show<br/>||

=== Inherited Methods ===

 * [APIPangolincommonComponent jplex.common.Component]:  `$C`,  `cfg`,  `fireEvent`,  `getEvent`,  `lang`,  `locale`,  `setCfg`,  `setEvent`,  `unregister`, 
