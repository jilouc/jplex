#summary Class API for Component from module Common
#labels Class-jplex.common.Component,Release-Pangolin,Module-Common,API-Class
#sidebar APIPangolincommonIndex

= Class *jplex.common.Component*  =

== Description ==
Component class. This class is the mother class of every widget we use
in jPlex. It provides us a global management of the configurations and a unified ID allocation.

Defining a new component needs a bit more than just extending this class.
You'll need to initialize it by calling in the constructor
     <code>$super(eSrc, oConfig);</code>
And you need to define a private property object <em>_definition</em> containing at least the name of the component.
Here is a complete example of a component:

{{{
jPlex.provide('jplex.components.A', 'jplex.common.Component', {
    _definition: {
        name: 'A', // Name
        defaultConfig: { // The default config available in this.cfg('...')
            ...
            events: {...} // Custom Events
        }
        text: { fr: {...}, en: {...} } // Global labels for this components
    },
    initialize: function($super, eSrc, oConfig) {
        $super(eSrc, oConfig);
        ...
    },
    ...
}
}}}

You can also define an *extension* of another component by setting the private property object `_extension` rather
than `_definition`. In this case, the definition will be taken from the mother component and refined by the child
component. A common example is the Dialog and the Modal components that are extensions of the Frame component.




== Properties ==
<table border="1" cellspacing="0" cellpadding="5">        
<tr><td> *Name* </td><td> *Type* </td><td> *Description* </td></tr>
<tr><td> _component_ </td><td> Element </td><td> `` The component HTML Element</td></tr>
<tr><td> _createdComponent_ </td><td> Boolean </td><td> `` If true, the component property has been created during the initialization</td></tr>

</table>



== Methods ==
<table border="1" cellspacing="0" cellpadding="5">                                
<tr><td> *Signature* </td><td> *Return Type* </td><td> *Description* </td></tr>
<tr><td> `$C(c)` </td><td> `Component` </td><td> The ultimate function to get the component by its ID. This function can also accept an instance of Component too.<br />  - `c <String|Component>` The concerned component ID<br/></td></tr>
<tr><td> `cfg(sName)` </td><td> `String` </td><td> Get a configuration parameter<br />  - `sName <String>` Name of the config parameter<br/></td></tr>
<tr><td> `fireEvent(sEventName, oParameters)` </td><td> `void` </td><td> Fires the specified custom event with given parameters<br />  - `sEventName <String>` the custom event name<br/> - `oParameters <Object>` Optional. Hash of event parameters.<br/></td></tr>
<tr><td> `getEvent(sEventName)` </td><td> `Function` </td><td> Get the event handler for the custom event<br />  - `sEventName <String>` the custom event name<br/></td></tr>
<tr><td> `lang(sName)` </td><td> `String|Array|Boolean` </td><td> Reads the string or array that corresponds to the right lang<br />  - `sName <String>` name corresponding to the text field<br/></td></tr>
<tr><td> `locale(component, field)` </td><td> `void` </td><td> Reads the string or array in the common corresponding to the locale<br />  - `component <String>`<br/> - `field <String>`<br/></td></tr>
<tr><td> `setCfg(sName, mValue)` </td><td> `void` </td><td> Sets a local configuration parameter<br />  - `sName <String>` Name of the config parameter<br/> - `mValue <object>` Value to set<br/></td></tr>
<tr><td> `setEvent(sEventName, fEventHandler)` </td><td> `void` </td><td> Set the event handler for the custom event.
The context is bound to the component.<br />  - `sEventName <String>` the custom event name<br/> - `fEventHandler <Function>` the custom event handler<br/></td></tr>
<tr><td> `unregister()` </td><td> `void` </td><td> Deletes the reference in the component table, usefull when you delete a lot of component, it avoids memory
overflow<br /> </td></tr>

</table>
